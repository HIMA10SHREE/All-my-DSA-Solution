peak element
======================

O(log N)


class Solution
{
	// Function to find the peak element
	// arr[]: input array
	// n: size of array a[]
	public int peakElement(int[] arr,int n)
    {
       //add code here.
       int l=0;
       int r=n-1;
       int mid=0;
       while(l<=r){
           mid=l+(r-l)/2;
           if( (mid==0  || arr[mid]>=arr[mid-1]) && ( mid==n-1 || arr[mid]>=arr[mid+1] )){
                   return mid;
               }
               
           if(mid >= 0 && (arr[mid]<arr[mid+1])){
                   l=mid+1;
               }
               
           else{
                   r=mid-1;
               }
           }
           
           
           
    return mid ;   
     
       
    }
}













bitonic array
==========================


O(logn)

class Solution {
    int findMaximum(int[] arr, int n) {
        // code here
        int l=0;
        int r=n-1;
        int mid=0;
       
        
        while(l<=r){
            mid=l+(r-l)/2;
            if(mid>0 && mid<n-1){
                if(arr[mid]>=arr[mid+1] && arr[mid]>=arr[mid-1]){
                    return arr[mid];
                }
                if(arr[mid]<=arr[mid+1]){
                    l=mid+1;
                }
                else{
                    r=mid-1;
                }
            }
            
            else{
                if(mid==0){
                    if(arr[mid]<=arr[mid+1]){
                        return arr[mid+1];
                        
                    }
                    else{
                        return arr[mid];
                    }
                
                }
                else{
                    if(mid==n-1){
                        if(arr[mid]>arr[mid-1]){
                            return arr[mid];
                        }
                        else{
                            return arr[mid-1];
                        }
                    }
                }
            }
        }
        
        
        return arr[mid];
    }
}










Allocate pages
====================


class Solution 
{
    //Function to find minimum number of pages.
    
    public static boolean isCondition(int[] A,int M,int mid,int N){
        int sum2=0;
        int student=1;
        
        for(int i=0;i<N;i++){
            sum2=sum2+A[i];
            if(mid<sum2){
                student++;
                sum2=A[i];
            }
        }
        
        if(student<=M){
            return true;
        }
        
        return false;
    }
    
    public static int findPages(int[]A,int N,int M)
    {
        //Your code here
        if(M>N)
        {
            return -1;
        }
        
        
        int max=0;
        int sum1=0;
        for(int i=0;i<N;i++)
        {
            sum1=sum1+A[i];
            max=Math.max(max,A[i]);
        }
        
        int start=max;
        int end=sum1;
        int res=-1;
        int mid=0;
        
        while(start<=end){
            mid=start +(end-start)/2;
            
            if(isCondition(A,M,mid,N)==true){
                res=mid;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
            
            
        }
        
        return res;
    }
};


