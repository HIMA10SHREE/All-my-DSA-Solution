MAXIMUM NO. OF 1'S ROW


T.C-NlogM
S.C-1

class Sol
{
    public static int maxOnes (int Mat[][], int N, int M)
    {
        // your code here
        int indx=Integer.MAX_VALUE;
        int row=N;
        
        for(int i=0;i<N;i++){
            int l=0;
            int r=Mat[0].length-1;
            while(l<=r){
                int mid=l+(r-l)/2;
                if(Mat[i][mid]==1){
                    r=mid-1;
                }
                else{
                    l=mid+1;
                }
            }
            
            r=r+1;
            if(indx>r){
                indx=r;
                   row=i;
            }
            }
            
           
        
        
        
        return row;
        
    }
}










MORE OPTIMISED ====

TC--O(N+M)
SC--O(1)

class Solution {
    int rowWithMax1s(int arr[][], int n, int m) {
        // code here
        int i=0;
        int j=m-1;
        int count=0;
        int maxcount=0;
        int indx=-1;
        
        while(i<n && j>=0){
            
            if(arr[i][j]==1){
                count++;
                 if(j==0 && count==m){
                     indx=i;
                     break;
            }
                indx=i;
                j--;
                
            }
            else{
                
                i++;
                
            
            }
            
           
                
                
        }
        return indx;
        
    }
}





Compute before Matrix
=============================

class Solution{
    public int[][] computeBeforeMatrix(int N, int M,int[][] after ){
        // Code here
        int[][] before=new int[N][M];
        before[0][0]=after[0][0];
        for(int i=1;i<M;i++){
            before[0][i]=after[0][i]-after[0][i-1];
        }
        
        for(int i=1;i<N;i++){
            before[i][0]=after[i][0]-after[i-1][0];
        }
        
        for(int i=1;i<N;i++){
            for(int j=1;j<M;j++){
                before[i][j]=after[i][j]-(after[i-1][j]+after[i][j-1]-after[i-1][j-1]);
            }
        }
        
        return before;
        
        
    }
}






